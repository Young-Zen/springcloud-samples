server:
  servlet:
    context-path: /api/storage
  port: 8085

security:
  csrf:
    enabled: false

spring:
  application:
    name: storage-server
  security:
    user:
      name: actuator
      password: actuator
      roles: ACTUATOR_ADMIN
  boot:
    admin:
      client:
        username: admin #These two are needed so that the client
        password: admin #can register at the protected server api
  datasource:
    url: jdbc:mysql://mysql-service-address:3306/storage?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: mysql123root
    driver-class-name: com.mysql.cj.jdbc.Driver
  flyway:
    # 启用或禁用 flyway
    enabled: true
    # flyway 的 clean 命令会删除指定 schema 下的所有 table, 生产务必禁掉。这个默认值是 false 理论上作为默认配置是不科学的。
    clean-disabled: true
    # SQL 脚本的目录，多个路径使用逗号分隔 默认值 classpath:db/migration
    locations: classpath:db/migration
    #  metadata 版本控制信息表 默认 flyway_schema_history
    table: t_flyway_schema_history
    # 如果没有 flyway_schema_history 这个 metadata 表，在执行 flyway migrate 命令之前，必须先执行 flyway baseline 命令
    # 设置为 true 后 flyway 将在需要 baseline 的时候，自动执行一次 baseline。
    baseline-on-migrate: true
    # 指定 baseline 的版本号，默认值为 1，低于该版本号的 SQL 文件，migrate 时会被忽略
    baseline-version: 1
    # 字符编码 默认 UTF-8
    encoding: UTF-8
    # 是否允许不按顺序迁移，开发建议 true，生产建议 false
    out-of-order: false
    # 需要 flyway 管控的 schema list,这里我们配置为flyway  缺省的话, 使用spring.datasource.url 配置的那个 schema,
    # 可以指定多个schema, 但仅会在第一个schema下建立 metadata 表, 也仅在第一个schema应用migration sql 脚本.
    # 但flyway Clean 命令会依次在这些schema下都执行一遍. 所以 确保生产 spring.flyway.clean-disabled 为 true
    schemas: storage
    # 执行迁移时是否自动调用验证，当版本不符合逻辑会抛出异常
    validate-on-migrate: true
  profiles:
    active: test

eureka:
  instance:
#    hostname: eureka-service-address
#    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    metadata-map:
      user.name: ${spring.security.user.name}     #These two are needed so that the server
      user.password: ${spring.security.user.name} #can access the protected client endpoints
      management.context-path: ${server.servlet.context-path}/actuator
    status-page-url-path: ${server.servlet.context-path}/actuator/info
    health-check-url-path: ${server.servlet.context-path}/actuator/health
    home-page-url-path: ${server.servlet.context-path}
  client:
    registryFetchIntervalSeconds: 10
    serviceUrl:
      defaultZone: http://eureka:eureka@eureka-service-address:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
      show-details: always

custom:
  log:
    additional-skip-pattern: /
    result: false

---
spring:
  profiles: test
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
custom:
  mybatisPlus:
    performance:
      enable: true
  swagger:
    csrf:
      enable: true

---
spring:
  profiles: prod

custom:
  swagger:
    enable: false
